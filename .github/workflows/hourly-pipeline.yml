name: WeQuo Hourly Pipeline

on:
  schedule:
    # Run every 6 hours
    - cron: "0 */6 * * *"
  workflow_dispatch: # Allow manual trigger
    inputs:
      force_run:
        description: "Force run even if recent data exists"
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: "3.11"

jobs:
  run-pipeline:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # ‚≠ê Download previous database artifact
      - name: Download previous database
        uses: dawidd6/action-download-artifact@v3
        continue-on-error: true
        with:
          name: wequo-database
          path: data/
          workflow: hourly-pipeline.yml
          if_no_artifact_found: ignore

      - name: Check for existing database
        run: |
          if [ -f "data/wequo.db" ]; then
            echo "‚úÖ Found existing database"
            ls -lh data/wequo.db
            du -h data/wequo.db
          else
            echo "‚ÑπÔ∏è No existing database found - will create new one"
          fi

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up environment variables
        run: |
          # Core connectors
          echo "FRED_API_KEY=${{ secrets.FRED_API_KEY }}" >> $GITHUB_ENV
          echo "ALPHA_VANTAGE_API_KEY=${{ secrets.ALPHA_VANTAGE_API_KEY }}" >> $GITHUB_ENV
          echo "WORLD_BANK_API_KEY=${{ secrets.WORLD_BANK_API_KEY }}" >> $GITHUB_ENV
          echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV

          # New connectors (optional - connectors will use mock data if keys not provided)
          echo "ACLED_API_KEY=${{ secrets.ACLED_API_KEY }}" >> $GITHUB_ENV
          echo "ACLED_EMAIL=${{ secrets.ACLED_EMAIL }}" >> $GITHUB_ENV
          echo "NOAA_API_KEY=${{ secrets.NOAA_API_KEY }}" >> $GITHUB_ENV
          echo "UNCOMTRADE_API_KEY=${{ secrets.UNCOMTRADE_API_KEY }}" >> $GITHUB_ENV
          echo "MARINETRAFFIC_API_KEY=${{ secrets.MARINETRAFFIC_API_KEY }}" >> $GITHUB_ENV

      - name: Run hourly data pipeline
        run: |
          python scripts/run_weekly.py

      - name: Check pipeline output
        run: |
          ls -la data/output/
          # Get today's date in YYYY-MM-DD format
          TODAY=$(date +%Y-%m-%d)
          if [ -d "data/output/$TODAY" ]; then
            echo "‚úÖ Pipeline completed successfully for $TODAY"
            ls -la "data/output/$TODAY/"
          else
            echo "‚ùå Pipeline output directory not found"
            exit 1
          fi

      - name: Check database after pipeline
        run: |
          if [ -f "data/wequo.db" ]; then
            echo "‚úÖ Database updated"
            ls -lh data/wequo.db
            du -h data/wequo.db
            # Show database stats
            python scripts/db_query.py stats || true
          else
            echo "‚ùå Database not found after pipeline run"
            exit 1
          fi

      # ‚≠ê Upload database for next run (overwrites previous)
      - name: Upload database artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: wequo-database
          path: data/wequo.db
          retention-days: 90
          overwrite: true

      # Upload daily data package (keeps history)
      - name: Upload pipeline artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: daily-data-package-${{ github.run_number }}
          path: |
            data/output/
            !data/output/**/*.pyc
          retention-days: 90

      - name: Notify on failure
        if: failure()
        run: |
          echo "::error::WeQuo hourly pipeline failed. Check logs and data sources."

      - name: Generate summary
        if: success()
        run: |
          TODAY=$(date +%Y-%m-%d)
          if [ -f "data/output/$TODAY/package_summary.json" ]; then
            echo "## üìä WeQuo Hourly Pipeline Summary - $TODAY" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            cat > temp_summary.py << 'EOF'
          import json
          with open('data/output/' + '$TODAY' + '/package_summary.json') as f:
              data = json.load(f)
              sources = ', '.join(data.get('sources', []))
              print(f"**Sources processed:** {sources}")
              fred_data = data.get('latest_values', {}).get('fred', [])
              print(f"**Total data points:** {len(fred_data)}")
              if 'analytics' in data:
                  analytics = data['analytics']
                  top_deltas = analytics.get('top_deltas', [])
                  anomalies = analytics.get('anomalies', [])
                  trends = analytics.get('trends', [])
                  print(f"**Top deltas:** {len(top_deltas)}")
                  print(f"**Anomalies detected:** {len(anomalies)}")
                  print(f"**Trends analyzed:** {len(trends)}")
          EOF
            python temp_summary.py >> $GITHUB_STEP_SUMMARY
            rm temp_summary.py
          fi
          
          # Add database stats to summary
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üóÑÔ∏è Database Statistics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          python scripts/db_query.py stats >> $GITHUB_STEP_SUMMARY || echo "Stats unavailable" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  health-check:
    runs-on: ubuntu-latest
    needs: run-pipeline
    if: always()

    steps:
      - name: Check pipeline health
        run: |
          if [ "${{ needs.run-pipeline.result }}" == "success" ]; then
            echo "‚úÖ Hourly pipeline completed successfully"
          else
            echo "‚ùå Hourly pipeline failed or was cancelled"
            echo "::error::Hourly pipeline health check failed"
          fi